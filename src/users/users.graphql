type User @key(fields: "id"){
  # Example field (placeholder)
  id: ID!
  firstname: NonEmptyString
  lastname: NonEmptyString
  username: NonEmptyString
  address: NonEmptyString
  bank: NonEmptyString
  refCenter: NonEmptyString
  idNumber: NonEmptyString
  cnamCode: NonEmptyString
  prestCode:  Int
  taxId: NonEmptyString
  rib: NonEmptyString
  phone: NonEmptyString
  email: EmailAddress
  password: NonEmptyString
  permissions: [NonEmptyString]
  isActive: Boolean
  passwordReset: NonEmptyString
  passwordResetExp: DateTime
  activationToken: NonEmptyString
  activationTokenExp: DateTime
  insureds: [Insured]
  patients: [Patient]
}

input CreateUserInput {
  firstname: NonEmptyString
  lastname: NonEmptyString
  username: NonEmptyString
  address: NonEmptyString
  bank: NonEmptyString
  refCenter: NonEmptyString
  idNumber: NonEmptyString
  cnamCode: NonEmptyString
  prestCode:  Int
  taxId: NonEmptyString
  rib: NonEmptyString
  phone: NonEmptyString
  email: EmailAddress
  password: NonEmptyString
  permissions: [NonEmptyString]
  isActive: Boolean
  passwordReset: NonEmptyString
  passwordResetExp: DateTime
  activationToken: NonEmptyString
  activationTokenExp: DateTime
}

input UpdateUserInput {
  firstname: NonEmptyString
  lastname: NonEmptyString
  email: EmailAddress
}

input UpdatePasswordInput {
  oldPassword: NonEmptyString!
  password: NonEmptyString!
}

type Query {
  findByUsername(username:NonEmptyString!):User
  me: User
}

type Mutation {
  signup(createUserInput: CreateUserInput!): User!
  updateUser(id: NonEmptyString!, updateUserInput: UpdateUserInput!): User!
  activateUserAccount(activationToken: NonEmptyString!): User!
  forgotPassword(email: EmailAddress!): User!
  resetPassword(token: NonEmptyString!, password: NonEmptyString!): User!
  updatePassword(updatePasswordInput: UpdatePasswordInput): NonEmptyString!
}
